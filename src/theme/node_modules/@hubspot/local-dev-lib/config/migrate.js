"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeExistingConfigs = exports.mergeConfigProperties = exports.migrateConfig = exports.getConfigPath = exports.configFileExists = exports.getGlobalConfig = exports.getDeprecatedConfig = void 0;
const config_DEPRECATED = __importStar(require("./config_DEPRECATED"));
const CLIConfiguration_1 = require("./CLIConfiguration");
const index_1 = require("./index");
const configFile_1 = require("./configFile");
const config_1 = require("../constants/config");
const lang_1 = require("../utils/lang");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const i18nKey = 'config.migrate';
function getDeprecatedConfig(configPath) {
    return config_DEPRECATED.loadConfig(configPath);
}
exports.getDeprecatedConfig = getDeprecatedConfig;
function getGlobalConfig() {
    if (CLIConfiguration_1.CLIConfiguration.isActive()) {
        return CLIConfiguration_1.CLIConfiguration.config;
    }
    return null;
}
exports.getGlobalConfig = getGlobalConfig;
function configFileExists(useHiddenConfig = false, configPath) {
    return useHiddenConfig
        ? (0, configFile_1.configFileExists)()
        : Boolean(config_DEPRECATED.getConfigPath(configPath));
}
exports.configFileExists = configFileExists;
function getConfigPath(configPath, useHiddenConfig = false) {
    if (useHiddenConfig) {
        return (0, configFile_1.getConfigFilePath)();
    }
    return config_DEPRECATED.getConfigPath(configPath);
}
exports.getConfigPath = getConfigPath;
function writeGlobalConfigFile(updatedConfig, isMigrating = false) {
    const updatedConfigJson = JSON.stringify(updatedConfig);
    if (isMigrating) {
        (0, index_1.createEmptyConfigFile)({}, true);
    }
    (0, index_1.loadConfig)('');
    try {
        (0, index_1.writeConfig)({ source: updatedConfigJson });
        const oldConfigPath = config_DEPRECATED.getConfigPath();
        if (oldConfigPath) {
            const dir = path_1.default.dirname(oldConfigPath);
            const newConfigPath = path_1.default.join(dir, config_1.ARCHIVED_HUBSPOT_CONFIG_YAML_FILE_NAME);
            fs_1.default.renameSync(oldConfigPath, newConfigPath);
        }
    }
    catch (error) {
        (0, index_1.deleteEmptyConfigFile)();
        throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.writeConfig`, { configPath: config_1.GLOBAL_CONFIG_PATH }), { cause: error });
    }
}
function migrateConfig(deprecatedConfig) {
    if (!deprecatedConfig) {
        throw new Error((0, lang_1.i18n)(`${i18nKey}.errors.noDeprecatedConfig`));
    }
    const { defaultPortal, portals, ...rest } = deprecatedConfig;
    const updatedConfig = {
        ...rest,
        defaultAccount: defaultPortal,
        accounts: portals
            .filter(({ portalId }) => portalId !== undefined)
            .map(({ portalId, ...rest }) => ({
            ...rest,
            accountId: portalId,
        })),
    };
    writeGlobalConfigFile(updatedConfig, true);
}
exports.migrateConfig = migrateConfig;
function mergeConfigProperties(globalConfig, deprecatedConfig, force) {
    const propertiesToCheck = [
        config_1.DEFAULT_CMS_PUBLISH_MODE,
        config_1.HTTP_TIMEOUT,
        config_1.ENV,
        config_1.HTTP_USE_LOCALHOST,
        config_1.ALLOW_USAGE_TRACKING,
    ];
    const conflicts = [];
    propertiesToCheck.forEach(prop => {
        if (prop in deprecatedConfig) {
            if (force ||
                !(prop in globalConfig) ||
                globalConfig[prop] === deprecatedConfig[prop]) {
                // @ts-expect-error Cannot reconcile CLIConfig_NEW and CLIConfig_DEPRECATED types
                globalConfig[prop] = deprecatedConfig[prop];
            }
            else {
                conflicts.push({
                    property: prop,
                    oldValue: deprecatedConfig[prop],
                    newValue: globalConfig[prop],
                });
            }
        }
    });
    if (config_1.DEFAULT_ACCOUNT in globalConfig &&
        config_1.DEFAULT_PORTAL in deprecatedConfig &&
        globalConfig.defaultAccount !== deprecatedConfig.defaultPortal) {
        if (force) {
            globalConfig.defaultAccount = deprecatedConfig.defaultPortal;
        }
        else {
            conflicts.push({
                property: config_1.DEFAULT_ACCOUNT,
                oldValue: deprecatedConfig.defaultPortal,
                newValue: globalConfig.defaultAccount,
            });
        }
    }
    else if (config_1.DEFAULT_PORTAL in deprecatedConfig) {
        globalConfig.defaultAccount = deprecatedConfig.defaultPortal;
    }
    return { initialConfig: globalConfig, conflicts };
}
exports.mergeConfigProperties = mergeConfigProperties;
function mergeAccounts(globalConfig, deprecatedConfig) {
    let existingAccountIds = [];
    const skippedAccountIds = [];
    if (globalConfig.accounts && deprecatedConfig.portals) {
        existingAccountIds = globalConfig.accounts.map(account => account.accountId);
        const newAccounts = deprecatedConfig.portals
            .filter(portal => {
            const isExisting = existingAccountIds.includes(portal.portalId);
            if (isExisting) {
                skippedAccountIds.push(portal.portalId);
            }
            return !isExisting;
        })
            .map(({ portalId, ...rest }) => ({
            ...rest,
            accountId: portalId,
        }));
        if (newAccounts.length > 0) {
            globalConfig.accounts.push(...newAccounts);
        }
    }
    return {
        finalConfig: globalConfig,
        skippedAccountIds,
    };
}
function mergeExistingConfigs(globalConfig, deprecatedConfig) {
    const { finalConfig, skippedAccountIds } = mergeAccounts(globalConfig, deprecatedConfig);
    writeGlobalConfigFile(finalConfig);
    return { finalConfig, skippedAccountIds };
}
exports.mergeExistingConfigs = mergeExistingConfigs;
